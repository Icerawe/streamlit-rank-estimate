import streamlit as st
from function import get_sheet_data

# Load secrets
API_KEY = st.secrets["google"]["API_KEY"]
SPREADSHEET_ID = st.secrets["google"]["SPREADSHEET_ID"]

# --- UI Begins ---
tab1, tab2 = st.tabs(["üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Rank", "üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠"])

with tab1:
    st.header("üè∏ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡∏õ‡∏µ 2568 üéâ‚úåÔ∏è")
    st.markdown("###### ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πç‡∏≤‡∏ô‡∏ß‡∏ì Rank")
    df_score = get_sheet_data(API_KEY, SPREADSHEET_ID, "score")
    df = df_score.astype({
        "Name": "string",
        "Team": "string",
        "Score": "float"
    })

    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### üßë‚Äçü§ù‚Äçüßë Player 1")
        team1 = st.selectbox("‡∏ó‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1", df["Team"].unique(), key="team1")
        name1 = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 1", df[df["Team"] == team1]["Name"], key="name1")
        score1 = df[(df["Name"] == name1) & (df["Team"] == team1)]["Score"].values[0]

    with col2:
        st.markdown("### üßë‚Äçü§ù‚Äçüßë Player 2")
        team2 = st.selectbox("‡∏ó‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2", df["Team"].unique(), key="team2")
        name2 = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô 2", df[df["Team"] == team2]["Name"], key="name2")
        score2 = df[(df["Name"] == name2) & (df["Team"] == team2)]["Score"].values[0]

    def estimate_rank(score1, score2, avg):
        if abs(score1 - score2) >= 5:
            return "‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏Å ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ"
        elif avg >= 7.5:
            return "‡∏°‡∏∑‡∏≠ S"
        elif avg >= 5:
            return "‡∏°‡∏∑‡∏≠ N"
        elif avg >= 1:
            return "‡∏°‡∏∑‡∏≠ BG"
        else:
            return "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î"
        
        # Estimate
    avg_score = (score1 + score2) / 2
    if name1 == name2 and team1 == team2:
        st.warning("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô")
    else:
        rank = estimate_rank(score1, score2, avg_score)
        st.subheader("üéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Rank ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô")
        if rank.startswith("‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏Å"):
            st.error(f"Estimated Rank: **{rank}**")
        else:
            # st.text(avg_score)
            st.success(f"Estimated Rank: **{rank}**")

with tab2:
    st.header("üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠")
    df_pairs = get_sheet_data(API_KEY, SPREADSHEET_ID, "register")
    df_pairs = df_pairs[["Team", "Player 1", "Player 2", "Rank"]]

    # Optional: convert Rank to categorical for custom sorting
    rank_order = ["S", "N", "BG",]
    df_pairs["Rank"] = df_pairs["Rank"].astype(str)

    # Group by Rank and show the table
    for rank in rank_order:
        df_ranked = df_pairs[df_pairs["Rank"].str.upper() == rank.upper()]
        df_ranked = df_ranked.sort_values(by=["Team"])
        if not df_ranked.empty:
            df_ranked["Order"] = range(1, len(df_ranked) + 1)
            df_ranked.set_index("Order", inplace=True)

            st.markdown(f"### üèÖ Rank: {rank}")
            st.dataframe(df_ranked, use_container_width=True)